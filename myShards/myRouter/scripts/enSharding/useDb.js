db = db.getSiblingDB("taxisService");
sh.enableSharding("taxisService");
printjson("taxisService sharding enabled");
db.createCollection("orders");
printjson("orders collection is crieted");
sh.shardCollection("taxisService.orders", { ordersShardingField: 1 });
printjson("orders collection is sharded");
db.createCollection("tracks");
printjson("tracks collection is crieted");
sh.shardCollection("taxisService.tracks", { tracksShardingField: 1 });
printjson("tracks collection is sharded");
admin = db.getSiblingDB("admin");
admin.createUser({user: "admin", pwd: "mypwd", roles: [{ role: "clusterAdmin", db: "admin" }, { role: "userAdmin", db: "admin" }]});
db.getSiblingDB("taxisService").createUser({"user": "yar", "pwd": "mypwd", "roles": [{ "role" : "readWrite", "db" : "taxisService" }]});